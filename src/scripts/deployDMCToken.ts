import { ethers } from "ethers";

// Simplified ERC20 token ABI with only essential functions
const DMC_TOKEN_ABI = [
    "constructor()",
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function decimals() view returns (uint8)",
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address) view returns (uint256)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "event Transfer(address indexed from, address indexed to, uint256 amount)"
];

// Simplified bytecode without ETH transfer in constructor
const DMC_TOKEN_BYTECODE = "0x608060405234801561001057600080fd5b506040518060400160405280600981526020017f444f4f4d434f494e0000000000000000000000000000000000000000000000008152506003908051906020019061005c9291906100a3565b506040518060400160405280600381526020017f444d430000000000000000000000000000000000000000000000000000000000815250600490805190602001906100a89291906100a3565b506012600a6100b69190610129565b60028190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610187565b8280546100af90610156565b90600052602060002090601f0160209004810192826100d15760008555610118565b82601f106100ea57805160ff1916838001178555610118565b82800160010185558215610118579182015b828111156101175782518255916020019190600101906100fc565b5b5090506101259190610129565b5090565b5b8082111561014257600081600090555060010161012a565b5090565b6000819050919050565b6000600282049050600182168061016e57607f821691505b6020821081141561018257610181610196565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61071d806101966000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806318160ddd1461008c57806323b872dd146100aa57806370a08231146100da578063a9059cbb1461010a575b600080fd5b61007660048036038101906100719190610478565b61013a565b6040516100839190610510565b60405180910390f35b61009461015d565b6040516100a19190610510565b60405180910390f35b6100c460048036038101906100bf9190610478565b610163565b6040516100d19190610510565b60405180910390f35b6100f460048036038101906100ef9190610478565b610384565b6040516101019190610510565b60405180910390f35b610124600480360381019061011f9190610478565b6103cc565b6040516101319190610510565b60405180910390f35b60008060006101498585856103df565b915091505b9250929050565b60025481565b600080600061017285856103cc565b90506000811180156101855750828110155b6101c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bb90610608565b60405180910390fd5b6101cf8585856103df565b6101da8585856104a3565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef858585604051610209939291906106a8565b60405180910390a1600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060006103db8585856103df565b915091509250929050565b6000806000806103ee86610384565b90508381101561042f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610426906106e8565b60405180910390fd5b61043a868686610163565b9150915081610479576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610470906106e8565b60405180910390fd5b509392505050565b6000813590506104928161071c565b92915050565b6000602082840312156104ae576104ad610717565b5b60006104bc84828501610483565b91505092915050565b60008115159050919050565b6104da816104c5565b82525050565b60006020820190506104f560008301846104d1565b92915050565b6000819050919050565b61050e816104fb565b82525050565b600060208201905061052960008301846104d1565b92915050565b600082825260208201905092915050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006105f2602683610552565b91506105fd82610563565b604082019050919050565b6000602082019050818103600083015261062181846105e5565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061065482610629565b9050919050565b61066481610649565b82525050565b61067381610649565b82525050565b61068281610649565b82525050565b6000602082019050610682600083018461065b565b92915050565b6000606082019050610682600083018661065b565b61069d602083018561065b565b6106aa6040830184610505565b949350505050565b7f45524332303a207472616e73666572206661696c6564000000000000000000006000820152602082015250565b60006106d2601483610552565b91506106dd826106a3565b602082019050919050565b6000602082019050818103600083015261070181846106c5565b905092915050565b6000819050919050565b61071b81610709565b8114610726576000fd5b50565b61072f81610709565b811461073a576000fd5b5056fea2646970667358221220d7a0d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d964736f6c63430008000033";

export const deployDMCToken = async (signer: ethers.Signer) => {
    try {
        console.log("Starting DMC token deployment with simplified contract...");
        
        const factory = new ethers.ContractFactory(
            DMC_TOKEN_ABI,
            DMC_TOKEN_BYTECODE,
            signer
        );

        console.log("Creating contract instance...");
        const contract = await factory.deploy({
            gasLimit: 3000000 // Explicit gas limit
        });
        
        console.log("Waiting for deployment transaction confirmation...");
        await contract.deployed();
        
        console.log("DMC Token deployed successfully at:", contract.address);
        return contract;
        
    } catch (error) {
        console.error("Error deploying DMC token:", error);
        throw error;
    }
};